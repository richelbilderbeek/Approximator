#ifndef QTTOOLTESTAPPROXIMATORMAINDIALOG_H
#define QTTOOLTESTAPPROXIMATORMAINDIALOG_H

#include <boost/shared_ptr.hpp>
#include "approximator.h"
#include "qthideandshowdialog.h"

struct QwtPlot;
struct QwtPlotCurve;

namespace Ui {
  class QtToolTestApproximatorXyzMainDialog;
}

namespace ribi {

class QtToolTestApproximatorXyzMainDialog : public QtHideAndShowDialog
{
  Q_OBJECT
  
public:
  explicit QtToolTestApproximatorXyzMainDialog(QWidget *parent = 0);
  ~QtToolTestApproximatorXyzMainDialog();
  
private slots:
  void on_button_clicked();

  void on_box_int_x_valueChanged(int arg1);
  void on_box_double_y_valueChanged(double arg1);
  void on_box_int_z_valueChanged(int arg1);

private:
  Ui::QtToolTestApproximatorXyzMainDialog *ui;
  typedef double ApproximatorKey;
  typedef double ApproximatorValue;
  typedef Approximator<ApproximatorKey,Approximator<ApproximatorKey,ApproximatorValue> > Approximator_t;
  Approximator_t m_approximator;

  static const int m_n_curves = 3;
  typedef std::array<std::tuple<QwtPlotCurve *,QwtPlotCurve *,boost::shared_ptr<QwtPlot>>,m_n_curves> Data;
  Data m_data;

  static Data CreateData();

  ///The line curve containing the continuous approximation
  QwtPlotCurve * GetCurveApproximation(const int i);

  ///The dotted curve containing the raw data points
  QwtPlotCurve * GetCurveValues(const int i);
  const boost::shared_ptr<QwtPlot> GetPlot(const int i);

  void Plot();
};

} //~namespace ribi

#endif // QTTOOLTESTAPPROXIMATORMAINDIALOG_H
